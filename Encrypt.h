#ifndef ENCRYPT_H
#define ENCRYPT_H
#include <stdint.h>
#include "aes.h"
#include <string.h>

void Encrypt(char * arg){

//define qual tamanho de chave a ser usado baseado no DEFINE escolhido na aes.h

#ifdef AES128
    printf("AES 128 em uso...\n");
#elif defined(AES192)
    printf("AES 192 em uso...\n");
#elif defined(AES256)
    printf("AES 256 em uso...\n");
#endif // AES128

    //For que passa o que foi escrito em arg para in, para in passar pelo algoritmo criptográfico, feito em todas as chaves
#ifdef AES128
	uint8_t key[64] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t in[64] = { ' ' };
	for (int i = 0; i < 64; i++) {
		in[i] = arg[i];
	}
#elif defined(AES192)
	uint8_t key[64] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
		0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };
	uint8_t in[64] = { ' ' };
	for (int i = 0; i < 64; i++) {
		in[i] = arg[i];
	}

#elif defined(AES256)
	uint8_t key[64] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t in[64] = { ' ' };
	for (int i = 0; i < 64; i++) {
		in[i] = arg[i];

	}
#endif // AES128
	//Inicializa o processo de encrypt
	struct AES_ctx ctx;
	AES_init_ctx(&ctx, key);
    //Encripta o texto

    AES_ECB_encrypt(&ctx, in, sizeof(in));


    //Manda o in, cifrado, para arg, onde será realmente utilizado no envio da mensagem
    for(int i = 0; i < 64; i++){
        arg[i] = in[i];
    }
}


//Processo inverso da função Encrypt

void Decrypt(char * arg){

#ifdef AES128
	uint8_t key[64] = { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c };
	uint8_t in[64] = { ' '};

#elif defined(AES192)
	uint8_t key[64] = { 0x8e, 0x73, 0xb0, 0xf7, 0xda, 0x0e, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5,
	uint8_t in[64] = { ' ' };
		0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b };

#elif defined(AES256)
	uint8_t key[64] = { 0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
		0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4 };
	uint8_t in[2048] = { ' ' };

#endif // AES128
    for(int i = 0; i < 64; i++){
       in[i] = arg[i];
    }
	struct AES_ctx ctx;
	AES_init_ctx(&ctx, key);

	//Única mudança com relação ao encrypt é esta
    AES_ECB_decrypt(&ctx, in, sizeof(in));

    for(int i = 0; i < 64; i++){
       arg[i] = in[i];
    }

}
#endif // ENCRYPT_H
